import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.StandardOpenOption

plugins {
	id 'java'
	id 'application'
	id 'maven-publish'
	id 'jacoco'
}

group = 'net.shrimpworks'
version = "1.8"

mainClassName = 'net.shrimpworks.unreal.archive.Main'

compileJava {
	options.release = 11
}

if (System.getenv().containsKey("DRONE_BUILD_NUMBER")) {
	version = "${version}.${System.env.DRONE_BUILD_NUMBER}"
}

repositories {
	mavenCentral()
	maven {
		url "https://code.shrimpworks.za.net/artefacts"
	}
}

publishing {
	repositories {
		maven {
			name = "ShrimpWorks"
			url = 'https://code.shrimpworks.za.net/artefacts/'
			authentication {
				basic(BasicAuthentication)
			}
			credentials(PasswordCredentials) {
				username = "${System.env.ARTEFACTS_USER}"
				password = "${System.env.ARTEFACTS_PASSWORD}"
			}
		}
	}
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}
}

dependencies {
	implementation 'net.shrimpworks:unreal-package-lib:1.9.20'
	implementation 'net.shrimpworks:package-dependency:1.3.17'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0-rc3'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.0-rc3'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.0-rc3'

	implementation 'org.freemarker:freemarker:2.3.31'

	implementation 'com.backblaze.b2:b2-sdk-core:6.1.0'
	implementation 'com.backblaze.b2:b2-sdk-httpclient:6.1.0'

	// S3 compatible storage client
	implementation 'io.minio:minio:8.4.5'

	implementation 'com.vladsch.flexmark:flexmark:0.64.0'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
}

/**
 * Create list of static files, used for later extraction from the jar to disk.
 */
processResources.doLast {
	def wwwStaticDir = projectDir.toPath().resolve('src/main/resources/net/shrimpworks/unreal/archive/www/static')
	def destFile = buildDir.toPath().resolve('resources/main/net/shrimpworks/unreal/archive/www/static.list')
	def staticList = new StringBuilder()
	files { fileTree(wwwStaticDir).matching { exclude('**/*.xcf') } }.each {
		staticList.append(wwwStaticDir.getParent().relativize(it.toPath())).append("\t").append(it.lastModified()).append("\n")
	}

	// create single all.css file - cssOut filename must be used in _header.html
	def cssSource = files(
			wwwStaticDir.resolve("fonts/fonts.css"),
			wwwStaticDir.resolve("css/style.css"),
			wwwStaticDir.resolve("css/style4.css")
	)
	def cssDate = cssSource.max {f -> f.lastModified()}
	def cssOut = destFile.parent.resolve("static/css/all.css")
	cssOut.write('') // truncate output if needed
	cssSource.each { f -> cssOut << f.text.replaceAll("/\\*.+?\\*/", "").replaceAll("\n", "").replaceAll("\\s{2,}", " ") }
	staticList.append(destFile.getParent().relativize(cssOut)).append("\t").append(cssDate.lastModified()).append("\n")

	Files.write(destFile, staticList.toString().replaceAll("\\\\", "/").getBytes(StandardCharsets.UTF_8),
			StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)
}

jar {
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
		)
	}
}

task execJar(type: Jar) {
	// exclude jar signatures - else it invalidates our fat jar
	exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
	exclude('**/*.xcf')

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	archiveClassifier = "exec"
	archiveFileName = "${archiveBaseName.get()}-${archiveClassifier.get()}.${archiveExtension.get()}"
	from sourceSets.main.output

	dependsOn configurations.runtimeClasspath

	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
				'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
		)
	}

	// build the fat executable jar file
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}

	// run the script which builds the executable
	if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
		doLast {
			project.exec {
				commandLine(
						"$projectDir/etc/build-launcher.sh",
						"$projectDir/etc/launcher.sh",
						"${destinationDirectory.get()}/${archiveFileName.get()}",
						"${destinationDirectory.get()}/${archiveBaseName.get()}")
			}
		}
	}
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}
